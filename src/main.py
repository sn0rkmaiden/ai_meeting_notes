import datetime
import shutil
import gradio as gr
import diarization
import summarize
from typing import Optional


def handle_audio(audio_record: Optional[str], audio_upload: Optional[str], progress=gr.Progress()) -> tuple[str, str, str]:
    audio_path = audio_upload if audio_upload else audio_record

    if audio_path is None:
        return "–ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "–ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "–ê—É–¥–∏–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

    timestamp = datetime.datetime.now().isoformat()
    new_path = f"recorded_{timestamp}"
    if "." in audio_path:
        new_path += audio_path[audio_path.rfind("."):]
    shutil.move(audio_path, new_path)

    progress(0, "üîç –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ...")

    phrases = diarizer.diarize(new_path)

    md = diarization.phrases_to_markdown(phrases)

    progress(0.33, "üîç –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")

    keywords = (
        "1. –ù–µ–≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏\n"
        "2. –û –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n"
        "3. –ù–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å"
    )

    progress(0.67, "üîç –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...")

    summary = llm.summarize(md)

    progress(1.0, "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    return md, keywords, summary


diarizer = diarization.Diarizer()

llm = summarize.Summarizer()


custom_css = """
:root {
    --input-bg: #f8f9fa;
    --input-border: #e0e0e0;
}
.dark {
    --input-bg: #2b2b2b;
    --input-border: #444;
}

#audio-analyzer-app {
    max-width: 900px !important;
}
.audio-input-container {
    background: var(--input-bg) !important;
    padding: 20px;
    border-radius: 10px;
    border: 1px solid var(--input-border) !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.output-container {
    height: 70vh;
    min-height: 400px;
}
.tab-content {
    height: calc(100% - 40px) !important;
}
.textbox {
    height: 100% !important;
    font-family: monospace !important;
}
.transcript-textbox {
    height: 100% !important;
    white-space: pre-wrap;
}
.analyze-btn {
    background: #2196F3 !important;
    color: white !important;
}
.progress-bar {
    margin-top: 10px;
}
.tab-button {
    padding: 8px 15px !important;
}
.file-upload {
    border: 2px dashed #aaa !important;
    padding: 20px !important;
    border-radius: 10px !important;
}
.file-upload:hover {
    border-color: #2196F3 !important;
}
.audio-player {
    width: 100% !important;
    margin-top: 10px;
}
"""

with gr.Blocks(title="–ê—É–¥–∏–æ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", theme=gr.themes.Soft(), css=custom_css) as demo:
    gr.Markdown("""# üé§ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ê—É–¥–∏–æ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    <p style="color: #666;">–ó–∞–ø–∏—à–∏—Ç–µ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
    """)

    with gr.Row(equal_height=False):
        with gr.Column(scale=1, elem_classes="audio-input-container"):
            with gr.Tabs():
                with gr.Tab("üéôÔ∏è –ó–∞–ø–∏—Å—å", id="record_tab"):
                    audio_input = gr.Audio(
                        label="–ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞",
                        type="filepath",
                        sources=["microphone"],
                        elem_classes="audio-player"
                    )

                with gr.Tab("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞", id="upload_tab"):
                    file_input = gr.Audio(
                        label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
                        type="filepath",
                        sources=["upload"],
                        elem_classes=["audio-player", "file-upload"]
                    )

            with gr.Row():
                clear_btn = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å", variant="secondary")
                analyze_btn = gr.Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", variant="primary", elem_classes="analyze-btn")

            progress_bar = gr.HTML(visible=False)

        with gr.Column(scale=2, elem_classes="output-container"):
            with gr.Tabs():
                with gr.Tab("üìú –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", elem_classes="tab-button"):
                    transcript_output = gr.Textbox(
                        label="–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ",
                        lines=18,
                        interactive=True,
                        elem_classes="transcript-textbox"
                    )
                with gr.Tab("üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã", elem_classes="tab-button"):
                    phrases_output = gr.Textbox(
                        label="–í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã",
                        lines=18,
                        interactive=False,
                        elem_classes="textbox"
                    )
                with gr.Tab("üìù –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", elem_classes="tab-button"):
                    summary_output = gr.Textbox(
                        label="–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                        lines=18,
                        interactive=False,
                        elem_classes="textbox"
                    )


    def show_progress():
        return gr.HTML("""
        <div class="progress-bar">
            <progress value="0" max="1" style="width: 100%"></progress>
            <div id="progress-text">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</div>
        </div>
        """, visible=True)


    def get_active_audio(audio_record, audio_upload):
        return audio_upload if audio_upload else audio_record

    analyze_btn.click(
        show_progress,
        outputs=progress_bar
    ).then(
        handle_audio,
        inputs=[audio_input, file_input],  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã
        outputs=[transcript_output, phrases_output, summary_output],
    ).then(
        lambda: gr.HTML(visible=False),
        outputs=progress_bar
    )

    clear_btn.click(
        lambda: [None, None, "", "", "", gr.HTML(visible=False)],
        outputs=[audio_input, file_input, transcript_output, phrases_output, summary_output, progress_bar]
    )

if __name__ == "__main__":
    try:
        demo.queue(concurrency_count=4).launch(server_port=7860)
    except TypeError:
        demo.queue().launch(server_port=7860)
